--Assignment Day3 –SQL
--Yu Wang

--Short Answer questions
--1. I prefer JOIN. Because JOIN usually has a better performance than subquery.
--2. CTE stands for common table expression. I use them when I need to reference/join the same data set multiple times
--3. The table variable is a special type of the local variable that helps to store data temporarily. It has local scope limited to the current batch. It is created in System Databases/tempdb.

--4. 
--1) DELETE can remove specified rows when using with WHERE clauses, TRUNCATE removes all rows.
--2) DELETE is a DML command while TRUNCATE is a DDL command.
--3) DELETE requires DELETE permission while TRUNCATE requires ALTER permission.
--4) DELETE locks related rows. TRUNCATE locks the whole table.
--5) DELETE can be roll back. TRUNCATE cannot.
--6) DELETE can be used with the indexed views. TRUNCATE cannot.
--7) TRUNCATE has better performance than DELETE. Because TRUNCATE deallocate the pages storing data of this table and logs the deleted pages only while DELETE removes rows one at a time and records an entry in the transaction log for each deleted row.

--5. An identity column is a column that is made up of values generated by the database. Identity of column retains the identity after using DELETE Statement. Identity of the column is reset to its seed value after using TRUNCATE Statement.
--6. Same as 4.

--Queries
USE Northwind
GO

--1
SELECT DISTINCT e.City
FROM Employees e JOIN Customers c ON e.City = c.City

SELECT DISTINCT City 
FROM Employees
INTERSECT
SELECT DISTINCT City 
FROM Customers

--2
--a)
SELECT DISTINCT City 
FROM Customers
WHERE City NOT IN 
(SELECT DISTINCT City 
FROM  Employees)
--b)
SELECT DISTINCT City 
FROM Customers
EXCEPT
SELECT DISTINCT City 
FROM Employees

--3
SELECT p.ProductID, SUM(od.Quantity) OrderedQuantity
FROM Products p JOIN [Order Details] od ON p.ProductID = od.ProductID
GROUP BY p.ProductID

--4
SELECT c.City, SUM(od.Quantity) OrderedQuantity
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.City

--5?
SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(*) > 1

--6
SELECT c.City, COUNT(DISTINCT od.ProductID) OrderedProductsTypes
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.City
HAVING SUM(DISTINCT od.ProductID) > 1

--7
SELECT DISTINCT c.CustomerID, o.ShipCity, c.City
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE o.ShipCity != c.City

--8
SELECT TOP 5 od.ProductID, SUM(od.Quantity*od.UnitPrice) / SUM(od.Quantity) AvgPrice, 
(SELECT r.ShipCity FROM 
 (SELECT odInner.ProductID, oInner.ShipCity, RANK() OVER (PARTITION BY odInner.ProductID ORDER BY SUM(odInner.Quantity) DESC) RNK
 FROM [Order Details] odInner JOIN Orders oInner ON odInner.OrderID = oInner.OrderID
 WHERE od.ProductID = odInner.ProductID
 GROUP BY odInner.ProductID, oInner.ShipCity) AS r
WHERE r.RNK = 1 AND r.ProductID = od.ProductID) AS MostPopularCity
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID
GROUP BY od.ProductID
ORDER BY SUM(od.Quantity) DESC

--9
--a)
SELECT City
FROM Employees
WHERE City NOT IN
(SELECT DISTINCT c.City
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID)

--b)
SELECT City
FROM Employees
EXCEPT
SELECT DISTINCT c.City
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID

--10
SELECT EmployeeOrderCity.City FROM
(SELECT TOP 1 e.City AS City
FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.City
ORDER BY COUNT(*) DESC) EmployeeOrderCity
JOIN
(SELECT TOP 1 c.City AS City
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.City
ORDER BY SUM(od.Quantity) DESC) CustomerQuantityCity
ON EmployeeOrderCity.City = CustomerQuantityCity.City

SELECT * FROM
(SELECT TOP 1 e.City AS City
FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.City
ORDER BY COUNT(*) DESC) EmployeeOrderCity
INTERSECT
SELECT * FROM
(SELECT TOP 1 c.City AS City
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.City
ORDER BY SUM(od.Quantity) DESC) CustomerQuantityCity

--11
--We can delete the records where their RANK/ROW_NUMBER is greater than 1 after PARTITION BY all potential duplicate fields in the table.
--Or we can delete the records whoes id are not the MIN id after GROUP BY all potential duplicate fields.


--Employee (empid integer, mgrid integer, deptid integer, salary money) Dept (deptid integer, deptname varchar(20))
--12
SELECT empid FROM Employee
WHERE empid NOT IN
(SELECT e1.empid
FROM Employee e1 JOIN Employee e2 ON e1.empid = e2.mgrid)

SELECT empid FROM Employee
EXCEPT
SELECT e1.empid
FROM Employee e1 JOIN Employee e2 ON e1.empid = e2.mgrid

--13
SELECT deptname, empNumber FROM
(SELECT d.deptname, COUNT(empid) empNumber, RANK() OVER (ORDER BY COUNT(empid) DESC) RNK
FROM Dept d JOIN Employee e ON D.deptid = e.deptid
GROUP BY d.deptid) DeptEmpNumber
WHERE RNK = 1
ORDER BY deptname

--14
SELECT deptname, empid, salary FROM
(SELECT d.deptname, d.empid, e.salary, RANK() OVER (PARTITION BY d.deptname ORDER BY e.salary DESC) RNK
FROM Dept d JOIN Employee e ON D.deptid = e.deptid) DeptHighestSalary
WHERE RNK <= 3
